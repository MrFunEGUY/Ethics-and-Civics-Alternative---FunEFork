# Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended.
# There are still multiple hard-coded rules that apply in addition to these.
# If rules here evaluate to true, there might still be other rules that make the action unavailable.
# If a rule here evaluates to false the action will become unavailable.

# Root = Species
# From = Country
# This = Species

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {
				is_subject = yes
				OR = {
					is_megacorp = yes
					has_civic = civic_galactic_sovereign_megacorp
				}
				overlord = {
					OR = {
						is_same_empire = prevprev.owner
						AND = {
							exists = prevprev.owner.overlord
							is_same_empire = prevprev.owner.overlord
						}
					}
				}
			}
			owner = {
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						is_megacorp = yes
						has_civic = civic_galactic_sovereign_megacorp
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								is_megacorp = yes
								has_civic = civic_galactic_sovereign_megacorp
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							is_megacorp = yes
							has_civic = civic_galactic_sovereign_megacorp
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}
	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_NANITE_WORLD
		NOT = { is_planet_class = pc_gray_goo }
	}
	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_SYNAPTIC_LATHE
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
	ecaf_can_build_branch_office_on_planet_trigger = yes
}

# this/root = pop
# checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			# Rule out Traits for servitude & lack of free will
			NOR = {
				has_trait = trait_syncretic_proles
				has_trait = trait_symbiotic
			}
			can_think = yes
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					owner = { has_technology = tech_synthetic_workers }
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			# Rule out Organic Trophies
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
			# Rule out violations of the 'Right to Work' Resolution (prioritises organic workers)
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

# this = leader
# from = country scope
can_leader_be_ruler = {
	NOT = { leader_class = envoy }
	## Term Limits
	NOT = { has_leader_flag = term_limited }
	if = {
		limit = {
			from = {
				OR = {
					is_dict_dem = yes
					is_worker_coop_empire = yes
					is_democratic_authority = yes
				}
			}
		}
		OR = {
			NOT = { is_variable_set = num_terms }
			check_variable = { which = num_terms value < from.max_term_limit }
		}
	}
	## Battle thralls can't be rulers
	NOT = { has_slavery_type = { country = from type = slavery_military } }
}

# this = leader scope
leader_election_weight = {
	base = 0

	# Multiply by Faction support.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.faction_support
			owner = { has_country_flag = first_faction }
		}
		add = value:leader_faction_support_election_bonus
	}

	# If no Factions formed, fake faction support based on if it's an Empire ethic or not.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.no_faction_empire_ethic
			NOT = { owner = { has_country_flag = first_faction } }
			leader_has_empire_ethic = yes
		}
		add = 50
	}
	modifier = {
		custom_tooltip = {
			success_text = election_weight.no_faction_not_empire_ethic
			NOT = { owner = { has_country_flag = first_faction } }
			leader_has_empire_ethic = no
		}
		add = 25
	}

	# Not changing Ruler should be slightly preferred.
	modifier = {
		is_ruler = yes
		mult = 1.1
	}

	# Bonus if Leader was Councilor when election started. Or if no Election, is a Councilor now.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.iswas_councilor
			if = {
				limit = {
					owner = { has_country_flag = election_under_way }
				}
				has_leader_flag = councilor_at_election_start
			}
			else = {
				is_councilor = yes
				is_ruler = no
			}
		}
		mult = 1.05
	}

	# Governments (based on Ethics and Civics) might prefer certain Leader classes. Hide if +/- 0%.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_class_government_approves
			check_variable_arithmetic = {
				which = value:leader_class_government_match_bonus_mult
				value != 1
			}
		}
		mult = value:leader_class_government_match_bonus_mult
	}

	# Extra bonus for Councilor Subclass (which is a Trait).
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_councilor_subclass
			has_council_subclass = yes
		}
		mult = 1.2
	}

	# Penalty for Non-Councilor Subclass (which is a Trait).
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_councilor_subclass
			has_non_council_subclass = yes
		}
		mult = 0.8
	}

	# Bonus/penalty from Traits.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_traits
			check_variable_arithmetic = {
				which = value:leader_traits_election_bonus_mult
				value != 1
			}
		}
		mult = value:leader_traits_election_bonus_mult
	}

	# Bonus from Skill level.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_skill
			check_variable_arithmetic = {
				which = value:leader_skill_election_bonus_mult
				value != 1
			}
		}
		mult = value:leader_skill_election_bonus_mult
	}

	# Penalty from old Age, unless already ruler or immortal.
	modifier = {
		custom_tooltip = {
			success_text = election_weight.leader_age
			is_immortal = no
			is_ruler = no
			check_variable_arithmetic = {
				which = value:leader_age_percentage_of_lifespan
				value > 0.9
			}
		}
		mult = 0.5
	}

	# Penalty from Term limit
	modifier = {
		custom_tooltip = {
			success_text = "Term Limited"
			owner = {
				OR = {
					is_dict_dem = yes
					is_worker_coop_empire = yes
					is_democratic_authority = yes
				}
			}
			is_variable_set = num_terms
			check_variable = { which = num_terms value >= from.max_term_limit }
		}
		mult = 0
	}
}