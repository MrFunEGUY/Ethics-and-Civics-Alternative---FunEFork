###################################################
#
# "Overlord" Enclave Events
# By Gemma Thomson, Hadrien Buytaers & Chad Inglis
#
###################################################
namespace = enclave

# enclave.1xxx	general-purpose
# enclave.2xxx	Mercenary enclave
# enclave.3xxx	Salvager enclave
# enclave.4xxx	Shroudwalker enclave
# enclave.5xxx	Divination events
# enclave.6xxx	Shroud Tunnel events
# enclave.7xxx	Shroudwalker enclave (appendix)

fleet_event = {
	id = enclave.21
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		#Save creator empire as event target
		owner = {
			save_event_target_as = mercenary_enclave_creator
		}
		#Set up the ruler and species
		leader = {
			species = {
				save_event_target_as = mercenary_enclave_species
			}
			exile_leader_as = mercenary_enclave_leader
			save_event_target_as = mercenary_enclave_leader
		}
		#Set up the enclave starbase
		solar_system = {
			set_star_flag = enclave
			set_star_flag = mercenary_enclave_system
			#Set up on a moon only if an asteroid isn't available
			if = {
				limit = {
					count_system_planet = {
						limit = { is_asteroid = yes }
						count < 1
					}
				}
				random_system_planet = {
					limit = { is_moon = yes }
					save_event_target_as = mercenary_enclave_planet
					set_planet_flag = mercenary_enclave_planet
				}
			}
			else = {
				random_system_planet = {
					limit = { is_asteroid = yes }
					save_event_target_as = mercenary_enclave_planet
					set_planet_flag = mercenary_enclave_planet
				}
			}
		}
		#Create the Mercenary country, and assign a flavour ethic. Note that these are applied in priority order, so a patron who is Xenophilic, Authoritarian *and* Materialistic will found an enclave which is Fanatic Militarist and Materialist, as Materialism is listed first.
		if = {
			limit = {
				owner = { is_capitalism = yes }
			}
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_fanatic_capitalism }
		}
		else_if = {
			limit = {
				owner = { is_materialist = yes }
			}
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_fanatic_materialist }
		}
		else_if = {
			limit = {
				owner = { is_xenophobe = yes }
			}
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_xenophobe }
		}
		else_if = {
			limit = {
				owner = { is_authoritarian = yes }
			}
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_authoritarian }
		}
		else_if = {
			limit = {
				owner = { is_egalitarian = yes }
			}
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_egalitarian }
		}
		else = {
			create_mercenary_enclave_country = { INHERITED_ETHIC = ethic_xenophile }
		}


		#Give enclave creator's tech, start situation, and set creator flag
		event_target:mercenary_enclave_country = {
			copy_techs_from = { target = event_target:mercenary_enclave_creator }
			start_situation = {
				type = mercenary_dividends
				target = root
			}
			set_country_flag = created_by@event_target:mercenary_enclave_creator
			add_trust = {
				who =  event_target:mercenary_enclave_creator
				amount = 30
			}
			#Check for active resolutions and give associated modifiers to enclave
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_defense_contracts
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_defense_contracts_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_private_support_troops
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_private_support_troops_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_condottieri
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_condottieri_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_security_business
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_security_business_merc_naval_cap
				}
			}
			if = {
				limit = {
					is_active_resolution = resolution_defenseprivatization_corporate_warlords
				}
				add_modifier = {
					modifier = resolution_defenseprivatization_corporate_warlords_merc_naval_cap
				}
			}

			#Set a flag to prevent the AI from instantly hiring them
			set_timed_country_flag = {
				flag = merc_ai_delay
				years = 1
			}
		}

		owner = {
			add_modifier = {
				modifier = country_enclave_capacity_decrease_modifier
				multiplier = value:created_merc_number
			}
		}

		#Transfer ownership of the fleet
		set_owner = event_target:mercenary_enclave_country
	}

	after = {
		event_target:mercenary_enclave_creator = {
			country_event = { id = enclave.205 }
		}
		event_target:mercenary_enclave_country = {
			country_event = { id = enclave.22 days = 1 }
		}
	}
}